{
  "title": "Small Again Wiki",
  "story": [
    {
      "type": "paragraph",
      "id": "b4929bc5e7562b4f",
      "text": "We describe a server-side read-only federated wiki implementation written in ruby serving html and json but no javascript. The code helps us understand how this federation works. [https://github.com/WardCunningham/small-again-wiki/blob/ffe3c3ca2147b34da70ca401bc6b5456e0999ed5/server.rb github]"
    },
    {
      "type": "paragraph",
      "id": "63c06e812f0f0b46",
      "text": "Introducing \"small again\" federated wiki in 60 lines of ruby that plays well with others. [https://twitter.com/WardCunningham/status/718617510208086016 twitter]"
    },
    {
      "type": "markdown",
      "id": "7d67789ceefb7611",
      "text": "# Ruby"
    },
    {
      "type": "paragraph",
      "id": "e2ed70d766feefae",
      "text": "Ruby is suitable for large applications or small scripts. We write in the script style but add two packages that make our work easier."
    },
    {
      "type": "code",
      "id": "9d01194426b540ad",
      "text": "require 'json'\nrequire 'sinatra'\n"
    },
    {
      "type": "paragraph",
      "id": "b166a3ef3b59d323",
      "text": "Sinatra configures ruby for writing web servers. Install it once and then start our server with the ruby command."
    },
    {
      "type": "code",
      "id": "b41e1698fa74678f",
      "text": "gem install sinatra\nruby server.rb"
    },
    {
      "type": "paragraph",
      "id": "2e5c05938484f74a",
      "text": "Ruby is casual about punctuation. It can normally figure out where parenthesis and semicolons belong when omitted. Here we define a function 'path' with one argument that is inserted into a string in place of #{ ... }"
    },
    {
      "type": "code",
      "id": "5d94ee7966a52b51",
      "text": "  def path slug\n    \"../../.wiki/pages/#{slug}\"\n  end"
    },
    {
      "type": "markdown",
      "id": "ec069a33986d8912",
      "text": "# Sinatra"
    },
    {
      "type": "paragraph",
      "id": "2ccb7b2ba9b107ae",
      "text": "Sinatra servers handle web requests by matching them against patterns and running the first that applies. Here the wildcard's match is bound to 'slug'."
    },
    {
      "type": "code",
      "id": "d077b1dd62960bcb",
      "text": "  get '/*.json' do | slug |\n    cors\n    send_file path slug\n  end\n"
    },
    {
      "type": "paragraph",
      "id": "6801285bc78ac0da",
      "text": "These page requests are served directly from flat files already in the json format. We call three functions, 'cors', 'path' and 'send_file' where the last is built-in."
    },
    {
      "type": "paragraph",
      "id": "60cc605cb31f4b45",
      "text": "Functions we define are called 'helpers' in sinatra and appear in a special section by that name."
    },
    {
      "type": "markdown",
      "id": "703a9d857a00b68c",
      "text": "# Wiki"
    },
    {
      "type": "paragraph",
      "id": "391897906044ee8c",
      "text": "We define handlers and helpers sufficient to browse existing federated wiki content. We will explain the role each plays in federated wiki on subsequent pages."
    },
    {
      "type": "paragraph",
      "id": "bf458954edbe6711",
      "text": "[[Handlers]] of web requests."
    },
    {
      "type": "paragraph",
      "id": "4138a47df9c7e62d",
      "text": "[[Helpers]] use by the handlers."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Small Again Wiki",
        "story": []
      },
      "date": 1460311419989
    },
    {
      "item": {
        "type": "factory",
        "id": "a39a65529e720158"
      },
      "id": "a39a65529e720158",
      "type": "add",
      "date": 1460311422470
    },
    {
      "type": "remove",
      "id": "a39a65529e720158",
      "date": 1460311431136
    },
    {
      "item": {
        "type": "factory",
        "id": "b4929bc5e7562b4f"
      },
      "id": "b4929bc5e7562b4f",
      "type": "add",
      "date": 1460311435320
    },
    {
      "type": "edit",
      "id": "b4929bc5e7562b4f",
      "item": {
        "type": "paragraph",
        "id": "b4929bc5e7562b4f",
        "text": "We describe a server-side read-only federated wiki implementation written in ruby serving html and json but no javascript. We invite reading the code to understand federation."
      },
      "date": 1460311638925
    },
    {
      "type": "edit",
      "id": "b4929bc5e7562b4f",
      "item": {
        "type": "paragraph",
        "id": "b4929bc5e7562b4f",
        "text": "We describe a server-side read-only federated wiki implementation written in ruby serving html and json but no javascript. We invite reading the code to understand how our federation works."
      },
      "date": 1460311654388
    },
    {
      "item": {
        "type": "factory",
        "id": "2c8c1bbb2710e99a"
      },
      "id": "2c8c1bbb2710e99a",
      "type": "add",
      "after": "b4929bc5e7562b4f",
      "date": 1460311797378
    },
    {
      "type": "edit",
      "id": "2c8c1bbb2710e99a",
      "item": {
        "type": "paragraph",
        "id": "2c8c1bbb2710e99a",
        "text": "We wrote this version to understand what issues we might face writing a more complete service that would render the federation as html as a service."
      },
      "date": 1460311890758
    },
    {
      "type": "add",
      "id": "63c06e812f0f0b46",
      "item": {
        "type": "paragraph",
        "id": "63c06e812f0f0b46",
        "text": "[https://twitter.com/WardCunningham/status/718617510208086016 twitter]"
      },
      "after": "2c8c1bbb2710e99a",
      "date": 1460311911805
    },
    {
      "type": "edit",
      "id": "63c06e812f0f0b46",
      "item": {
        "type": "paragraph",
        "id": "63c06e812f0f0b46",
        "text": "Introducing \"small again\" federated wiki in 60 lines of ruby that plays well with others. [https://twitter.com/WardCunningham/status/718617510208086016 twitter]"
      },
      "date": 1460311957012
    },
    {
      "type": "move",
      "order": [
        "b4929bc5e7562b4f",
        "63c06e812f0f0b46",
        "2c8c1bbb2710e99a"
      ],
      "id": "63c06e812f0f0b46",
      "date": 1460312002657
    },
    {
      "type": "edit",
      "id": "b4929bc5e7562b4f",
      "item": {
        "type": "paragraph",
        "id": "b4929bc5e7562b4f",
        "text": "We describe a server-side read-only federated wiki implementation written in ruby serving html and json but no javascript. We invite reading the code to understand how our federation works. [https://github.com/WardCunningham/small-again-wiki/blob/ffe3c3ca2147b34da70ca401bc6b5456e0999ed5/server.rb github]"
      },
      "date": 1460312030869
    },
    {
      "type": "edit",
      "id": "b4929bc5e7562b4f",
      "item": {
        "type": "paragraph",
        "id": "b4929bc5e7562b4f",
        "text": "We describe a server-side read-only federated wiki implementation written in ruby serving html and json but no javascript. Read the code to understand how our federation works. [https://github.com/WardCunningham/small-again-wiki/blob/ffe3c3ca2147b34da70ca401bc6b5456e0999ed5/server.rb github]"
      },
      "date": 1460312076268
    },
    {
      "type": "edit",
      "id": "b4929bc5e7562b4f",
      "item": {
        "type": "paragraph",
        "id": "b4929bc5e7562b4f",
        "text": "We describe a server-side read-only federated wiki implementation written in ruby serving html and json but no javascript. The code helps us understand how this federation works. [https://github.com/WardCunningham/small-again-wiki/blob/ffe3c3ca2147b34da70ca401bc6b5456e0999ed5/server.rb github]"
      },
      "date": 1460312114297
    },
    {
      "type": "remove",
      "id": "2c8c1bbb2710e99a",
      "date": 1460312127154
    },
    {
      "type": "add",
      "id": "7d67789ceefb7611",
      "item": {
        "type": "paragraph",
        "id": "7d67789ceefb7611",
        "text": "# Ruby"
      },
      "after": "63c06e812f0f0b46",
      "date": 1460312210447
    },
    {
      "type": "add",
      "id": "e2ed70d766feefae",
      "item": {
        "type": "paragraph",
        "id": "e2ed70d766feefae",
        "text": "Ruby is suitable for large applications or small scripts. We write in the script style but add two packages that make our work easier."
      },
      "after": "7d67789ceefb7611",
      "date": 1460312447803
    },
    {
      "item": {
        "type": "factory",
        "id": "9d01194426b540ad"
      },
      "id": "9d01194426b540ad",
      "type": "add",
      "after": "e2ed70d766feefae",
      "date": 1460312473173
    },
    {
      "type": "edit",
      "id": "9d01194426b540ad",
      "item": {
        "type": "code",
        "id": "9d01194426b540ad",
        "text": "require 'json'\nrequire 'sinatra'\n"
      },
      "date": 1460312479022
    },
    {
      "item": {
        "type": "factory",
        "id": "b166a3ef3b59d323"
      },
      "id": "b166a3ef3b59d323",
      "type": "add",
      "after": "9d01194426b540ad",
      "date": 1460312506855
    },
    {
      "type": "edit",
      "id": "b166a3ef3b59d323",
      "item": {
        "type": "paragraph",
        "id": "b166a3ef3b59d323",
        "text": "Json comes with ruby while Sinatra may need to be installed."
      },
      "date": 1460312582653
    },
    {
      "type": "edit",
      "id": "b166a3ef3b59d323",
      "item": {
        "type": "paragraph",
        "id": "b166a3ef3b59d323",
        "text": "Sinatra configures ruby for writing web servers. Install it once and then start our server with the ruby command."
      },
      "date": 1460312822001
    },
    {
      "item": {
        "type": "factory",
        "id": "b41e1698fa74678f"
      },
      "id": "b41e1698fa74678f",
      "type": "add",
      "after": "b166a3ef3b59d323",
      "date": 1460312824400
    },
    {
      "type": "edit",
      "id": "b41e1698fa74678f",
      "item": {
        "type": "code",
        "id": "b41e1698fa74678f",
        "text": "gem install sinatra\nruby server.rb"
      },
      "date": 1460312838792
    },
    {
      "item": {
        "type": "factory",
        "id": "2e5c05938484f74a"
      },
      "id": "2e5c05938484f74a",
      "type": "add",
      "after": "b41e1698fa74678f",
      "date": 1460312874531
    },
    {
      "type": "edit",
      "id": "2e5c05938484f74a",
      "item": {
        "type": "paragraph",
        "id": "2e5c05938484f74a",
        "text": "Ruby is casual about punctuation. It can normally figure out where parenthesis and semicolons belong when omitted. "
      },
      "date": 1460313050740
    },
    {
      "type": "edit",
      "id": "2e5c05938484f74a",
      "item": {
        "type": "paragraph",
        "id": "2e5c05938484f74a",
        "text": "Ruby is casual about punctuation. It can normally figure out where parenthesis and semicolons belong when omitted. Here we define a function 'path' with one argument that is inserted into a string in place of #{ ... }"
      },
      "date": 1460313173452
    },
    {
      "item": {
        "type": "factory",
        "id": "5d94ee7966a52b51"
      },
      "id": "5d94ee7966a52b51",
      "type": "add",
      "after": "2e5c05938484f74a",
      "date": 1460313179645
    },
    {
      "type": "edit",
      "id": "5d94ee7966a52b51",
      "item": {
        "type": "code",
        "id": "5d94ee7966a52b51",
        "text": "  def path slug\n    \"../../.wiki/pages/#{slug}\"\n  end"
      },
      "date": 1460313195977
    },
    {
      "type": "edit",
      "id": "7d67789ceefb7611",
      "item": {
        "type": "markdown",
        "id": "7d67789ceefb7611",
        "text": "# Ruby"
      },
      "date": 1460313268333
    },
    {
      "item": {
        "type": "factory",
        "id": "ec069a33986d8912"
      },
      "id": "ec069a33986d8912",
      "type": "add",
      "after": "5d94ee7966a52b51",
      "date": 1460313280152
    },
    {
      "type": "edit",
      "id": "ec069a33986d8912",
      "item": {
        "type": "paragraph",
        "id": "ec069a33986d8912",
        "text": "# Sinatra"
      },
      "date": 1460313308500
    },
    {
      "type": "add",
      "id": "2ccb7b2ba9b107ae",
      "item": {
        "type": "paragraph",
        "id": "2ccb7b2ba9b107ae",
        "text": "Sinatra servers handle web requests by matching them against patterns and running the first that applies."
      },
      "after": "ec069a33986d8912",
      "date": 1460313562984
    },
    {
      "type": "edit",
      "id": "ec069a33986d8912",
      "item": {
        "type": "markdown",
        "id": "ec069a33986d8912",
        "text": "# Sinatra"
      },
      "date": 1460313571785
    },
    {
      "item": {
        "type": "factory",
        "id": "d077b1dd62960bcb"
      },
      "id": "d077b1dd62960bcb",
      "type": "add",
      "after": "2ccb7b2ba9b107ae",
      "date": 1460313637761
    },
    {
      "type": "edit",
      "id": "d077b1dd62960bcb",
      "item": {
        "type": "code",
        "id": "d077b1dd62960bcb",
        "text": "  get '/*.json' do | slug |\n    cors\n    send_file path slug\n  end\n"
      },
      "date": 1460313655963
    },
    {
      "item": {
        "type": "factory",
        "id": "6801285bc78ac0da"
      },
      "id": "6801285bc78ac0da",
      "type": "add",
      "after": "d077b1dd62960bcb",
      "date": 1460313693089
    },
    {
      "type": "edit",
      "id": "6801285bc78ac0da",
      "item": {
        "type": "paragraph",
        "id": "6801285bc78ac0da",
        "text": "Here page requests are served directly from flat files already in the json format. Here we call three functions, 'cors', 'path' and 'send_file' where the last is built-in to sinatra."
      },
      "date": 1460313940479
    },
    {
      "type": "edit",
      "id": "6801285bc78ac0da",
      "item": {
        "type": "paragraph",
        "id": "6801285bc78ac0da",
        "text": "Here page requests are served directly from flat files already in the json format. Here we call three functions, 'cors', 'path' and 'send_file' where the last is built-in."
      },
      "date": 1460313948282
    },
    {
      "type": "edit",
      "id": "2ccb7b2ba9b107ae",
      "item": {
        "type": "paragraph",
        "id": "2ccb7b2ba9b107ae",
        "text": "Sinatra servers handle web requests by matching them against patterns and running the first that applies. The wildcard's match is bound to 'slug'."
      },
      "date": 1460314077433
    },
    {
      "type": "edit",
      "id": "6801285bc78ac0da",
      "item": {
        "type": "paragraph",
        "id": "6801285bc78ac0da",
        "text": "These page requests are served directly from flat files already in the json format. Here we call three functions, 'cors', 'path' and 'send_file' where the last is built-in."
      },
      "date": 1460314105349
    },
    {
      "type": "add",
      "id": "60cc605cb31f4b45",
      "item": {
        "type": "paragraph",
        "id": "60cc605cb31f4b45",
        "text": "Functions we define are called 'helpers' in sinatra and appear in a special section by that name."
      },
      "after": "6801285bc78ac0da",
      "date": 1460314326941
    },
    {
      "type": "add",
      "id": "703a9d857a00b68c",
      "item": {
        "type": "paragraph",
        "id": "703a9d857a00b68c",
        "text": "# Wiki"
      },
      "after": "60cc605cb31f4b45",
      "date": 1460314362336
    },
    {
      "type": "add",
      "id": "391897906044ee8c",
      "item": {
        "type": "paragraph",
        "id": "391897906044ee8c",
        "text": "We define handlers and helpers sufficient to browse existing federated wiki content. We will explain the role each plays in federated wiki."
      },
      "after": "703a9d857a00b68c",
      "date": 1460314906727
    },
    {
      "type": "edit",
      "id": "391897906044ee8c",
      "item": {
        "type": "paragraph",
        "id": "391897906044ee8c",
        "text": "We define handlers and helpers sufficient to browse existing federated wiki content. We will explain the role each plays in federated wiki on subsequent pages."
      },
      "date": 1460314928259
    },
    {
      "type": "add",
      "id": "bf458954edbe6711",
      "item": {
        "type": "paragraph",
        "id": "bf458954edbe6711",
        "text": "[[Handlers]] of web requests."
      },
      "after": "391897906044ee8c",
      "date": 1460314974776
    },
    {
      "type": "add",
      "id": "4138a47df9c7e62d",
      "item": {
        "type": "paragraph",
        "id": "4138a47df9c7e62d",
        "text": "[[Helpers]] use by the handlers."
      },
      "after": "bf458954edbe6711",
      "date": 1460315024161
    },
    {
      "type": "edit",
      "id": "703a9d857a00b68c",
      "item": {
        "type": "markdown",
        "id": "703a9d857a00b68c",
        "text": "# Wiki"
      },
      "date": 1460315030044
    },
    {
      "type": "edit",
      "id": "2ccb7b2ba9b107ae",
      "item": {
        "type": "paragraph",
        "id": "2ccb7b2ba9b107ae",
        "text": "Sinatra servers handle web requests by matching them against patterns and running the first that applies. Here the wildcard's match is bound to 'slug'."
      },
      "date": 1460326369362
    },
    {
      "type": "edit",
      "id": "6801285bc78ac0da",
      "item": {
        "type": "paragraph",
        "id": "6801285bc78ac0da",
        "text": "These page requests are served directly from flat files already in the json format. We call three functions, 'cors', 'path' and 'send_file' where the last is built-in."
      },
      "date": 1460326396138
    }
  ]
}